// ls || cat | (cat) && clear | (cat & pwd) case to check in tree
// Master@Mindv3.0> echo foo | grep "found" > log && ls < input || echo "found" > success [ Case Solved ]

/* Parsing Reminder

	heredoc delimiter if a next delimiter to be joined has quotes
	its not going to be saved, since we save for only the first one
	put in mind to fix later inchallah (CHECKED)

	need to check for $ if its wrapped around quotes it will be the only
	token that we should not remove quotes from, KEEP IN MIND (CHECKED)

	keep in mind to add the red pointer into the tree nodes. (CHECKED)

	> Heredoc file descriptor transporation (Checked)
	
	> Pre parsing for this case (ls << eof) (Checked)

	> Delimiter trimming with no WhiteSpaces (Checked)

	> Add the Command itself to the first arg in arg struct (Checked)

	> Check the red_system need to protect Malloc Failure (Checked)

	> Need to add the Arg Struct and Red struct into the cleaning (Checked)

	> if the PWD AND OLDPWD are unetted nothing of them is updated, yet if exported they need to be changed (TO CHECK AFTER EXPORT IS WORKING)

	> Update the OLDPWD Also (TODO in Cd) (CHECKED)

	> Ft_strdup Failure in building the tree recursively (TODO) NEED TO CHECK CAREFULLY HOW IT SHOULD BE PROTECTED

	> re_built instead of tree in case of no command or operator (CHECKED)

	Change in Plan, the plan in which i leave quotes for expanding, i wont leave them, it interrupt
	the normal flow of removing quotes [ Case awk '{print $1}'], the quotes should be removed before
	given to execve in the Execution

*/

/*
	Execution Reminder 
	Master@Mindv3.0> ./minishell
	Migrane: command not found: ./minishell
	Need to handle ./Executable

	Case --> if multiple heredoc found redirected inisde of a command, close the firsts ones, 
	and only execute the command on the last heredoc
	Case --> [ls < l | cat] if the redirection failed nothing will be piped

	if CTRL + C, need to update the exit status into 1 (TODO)

	Master@Mindv3.0> "''"
	Migrane: command not found: ' 

	Master@Mindv3.0> ls > input < out
└─ COMMAND [ls]
      └─  [Red]  > input --> ID-> OUTPUT_FILE_ID
      └─  [Red]  > out --> ID-> INPUT_FILE_ID
      └─  [Arg]  > ls --> Quoted > 0
      └─ Space Next True
Migrane: out : No such file or directory
CTRL C NOT WORKING (HANGED)
*/



					--------------------------->> NORMINETTE <<---------------------------

* if an error in joining occurs, check ft_strdjoin while loop
* Ask Ouss if he uses the pointed variable in the env struct, cuz we deleted the zero point

void zero_point(t_data *data)
{
    t_envlist *trav;
    t_exportlist *trav_exp;

    trav = data->env;
    trav_exp = data->exp;
    while (trav != NULL)
    {
        trav->pointed = false;
        trav = trav->next;
    }
    while(trav_exp != NULL)
    {
        trav_exp->pointed = false;
        trav_exp = trav_exp->next;
    }
}
* Check tools4.c, and ask Ouss if he uses any of the functions that exsits there
* if execution of operatos failed in some case, check set_end function

*i need to free the tree if recursive build has failed, i need to clean it
only from fds since we cleaned the yard containing the red and arg system structs
* if heredoc bugged, go to here_doc_check ( // ?? set it on the same first node??)
	while (curr != NULL)
	{
		if (requirements(curr, id_class, data))
		{
			curr->here_times = 0; here and set id_class
			if (!change_id(curr->next, data)
				|| !open_heredoc(id_class, curr, data))
				return (0);
		}
		curr = curr->next;
	}

During the Big Scan, check for any function that add a node into a list 
then check after strdup Failure, u need to free the allocated node
before returning the NULL.

in case of arg system failing suddenly check the uncommented part in arg_system function

static int	operations(t_token *id_class)
{
	t_arg	*class;
	t_arg	*new;
	t_token	*arg;

	if (id_class->cmd_added == false)
	{
		class = new_argument(id_class);
		if (!class)
			return (free(new), free(new->value), 0);
		printf("class2 > %s\n", class->value);
		add_arg_to_list(&id_class->arg, class);
		id_class->cmd_added = true;
	}
	arg = get_argument(id_class);
	if (!arg)
	{
		// class = new_argument(id_class);
		// if (!class)
		// 	return (0);
		// printf("class1 > %s\n", class->value);
		// add_arg_to_list(&id_class->arg, class);
		return (1);
	}
	new = new_argument(arg);
	printf("new > %s\n", new->value);
	if (!new)
		return (0);
	return (add_arg_to_list(&id_class->arg, new), 1);
}


CASE 

ls -la || cat '-e' | pwd && cat -e| > f1 > f2 << ok << eof
MAKE SURE THAT ALL NAMES IN MINISHELL ARE LOWERCASE (CHECKED)

ADD -Wall -Wextra -Werror Flags

HEREDOC CTRL + C dammage the normal state of CTRL + C signal in the main

Master@Mindv3.0> << f4|
MasterMind: Syntax Error Near Unexpected Token `|' (CHECKED)
Add exit to be written when CTRL + D is made in the main (CHECKED)


to Ouss

Master@Mindv3.0> [wd
└─ COMMAND [[wd]
      └─  [Arg]  > [wd --> Quoted > 0
==389800== Syscall param execve(filename) points to unaddressable byte(s)
==389800==    at 0x4A1908B: execve (syscall-template.S:120)
==389800==    by 0x40AA0A: exec_node (in /home/ayel-bou/Desktop/MasterGit/MasterMerged/MasterMerged/parsing/minishell)
==389800==    by 0x40AC5F: recursive_execution (in /home/ayel-bou/Desktop/MasterGit/MasterMerged/MasterMerged/parsing/minishell)
==389800==    by 0x40AE4A: execute_tree (in /home/ayel-bou/Desktop/MasterGit/MasterMerged/MasterMerged/parsing/minishell)
==389800==    by 0x401576: main (in /home/ayel-bou/Desktop/MasterGit/MasterMerged/MasterMerged/parsing/minishell)
==389800==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==389800== 
Migrane: [wd: command not found


Master@Mindv3.0> cd ..
└─ COMMAND [cd]
      └─  [Arg]  > cd --> Quoted > 0
      └─ Space Next True
      └─  [Arg]  > .. --> Quoted > 0
Master@Mind: Permission Denied
Master@Mindv3.0> echo $?
└─ COMMAND [echo]
      └─  [Arg]  > echo --> Quoted > 0
      └─ Space Next True
      └─  [Arg]  > $? --> Quoted > 0
-1
Master@Mindv3.0> cd ..
└─ COMMAND [cd]
      └─  [Arg]  > cd --> Quoted > 0
      └─ Space Next True
      └─  [Arg]  > .. --> Quoted > 0
Master@Mindv3.0> echo $?
└─ COMMAND [echo]
      └─  [Arg]  > echo --> Quoted > 0
      └─ Space Next True
      └─  [Arg]  > $? --> Quoted > 0
-1

WATCH OUT FROM EXIT STATUS IT SHOULD BE ZERO